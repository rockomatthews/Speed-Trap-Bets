// Load environment variables from the .env file
require('dotenv').config();

// Import the necessary modules
const express = require('express'); // Express is a web framework for Node.js
const path = require('path'); // Path is a module to handle and transform file paths
const bodyParser = require('body-parser'); // Body-parser is middleware to parse incoming request bodies
const iRacingApi = require('./iRacingApi'); // Import the iRacing API module

// Create an instance of the Express application
const app = express();

// Use body-parser middleware to parse JSON request bodies
app.use(bodyParser.json());

// Serve static files from the React app's build directory
// This serves the files generated by 'npm run build' or 'yarn build' from the React app
app.use(express.static(path.join(__dirname, '../build')));

// Define API route for authentication with the iRacing API
app.post('/api/authenticate', async (req, res) => {
  try {
    // Authenticate with iRacing and retrieve cookies
    const cookies = await iRacingApi.authenticate();
    // Send the cookies back in the response
    res.json({ cookies });
  } catch (error) {
    // Log any errors that occur during authentication
    console.error('Error during authentication:', error.message);
    // Respond with a 500 status code and an error message
    res.status(500).json({ error: 'Authentication failed' });
  }
});

// Define API route to search for a driver in the iRacing API
app.get('/api/search-driver', async (req, res) => {
  try {
    // Extract the driver's name from the query parameters
    const { name } = req.query;
    // Search for the driver using the iRacing API
    const driver = await iRacingApi.searchDriver(name);
    // Send the driver data back in the response
    res.json(driver);
  } catch (error) {
    // Log any errors that occur during the driver search
    console.error('Error searching for driver:', error.message);
    // Respond with a 500 status code and an error message
    res.status(500).json({ error: 'Failed to search for driver' });
  }
});

// Define API route to handle user sign-up
app.post('/api/signup', async (req, res) => {
  try {
    // Extract email and password from the request body
    const { email, password } = req.body;
    // Encode the password using the provided email
    const passwordHash = iRacingApi.encodePassword(email, password);
    // Save the new user to the Supabase database
    const user = await iRacingApi.saveUser(email, passwordHash);
    // Send the user data back in the response
    res.json(user);
  } catch (error) {
    // Log any errors that occur during sign-up
    console.error('Error during sign-up:', error.message);
    // Respond with a 500 status code and an error message
    res.status(500).json({ error: 'Failed to sign up user' });
  }
});

// Catch-all route that returns the React app for any other routes
// This ensures that React's client-side routing works correctly
app.get('*', (req, res) => {
  // Serve the index.html file from the build directory
  res.sendFile(path.join(__dirname, '../build/index.html'));
});

// Define the port on which the server will listen
const PORT = process.env.PORT || 5000;

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
